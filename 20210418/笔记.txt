4.应用层：程序相关的一层
3.传输层
    (2)端口号分类
        知名端口号：0-1023
        ftp:21   SSH:22  Telnet:23   DNS：53  http:80  HTTPS:443   MYSQL:3306  Tomcat:8080
        动态端口号：1024-65535
    (3)一个端口号可以被多个程序使用吗？（不能）
    (4)一个程序可以有多个端口号吗？（可以）
    (5)UDP协议
	16位源端口号   16位目标端口号
	16位UDP长度   16位UDP检验和
		数据
    16位UDP长度=UDP头部长度（8个字节）+数据长度
    UDP一个包的最大理论长度=2^16=65536/1024=64KB
    检验和是用来确定数据在传输过程中是否被篡改，也就是用来判断数据的正确性的
    是如何判断的？假设数据是以MD5进行检验和的计算，那么原始的数据会先进行MD5得到一个值，把这个值存储在16位的检验和当中，
    接收端收到内容之后，按照通过的规则加密数据得到一个检验和，看是否和UDP头中的检验和一致，如果一致则数据是正确的。
    如果UDP编程的时候数据大小大于64KB会怎样？
	1.在应用层进行数据包的拆分和组合
	2.大于64KB不处理，交给TCP/IP协议去处理，它会在网络层进行分包和组包（不用，因为一旦有一个包丢失的话，将会舍弃其他所有的包）
    全双工：发送端或是接收端既能发送消息也能接收消息（UDP，TCP）
    半双工：发送端只能发送消息，接收端只能接收消息
    DNS、TFTP的底层是基于UDP的
    (6)TCP协议
    	16位源端口号    16位目的端口号
		32位序号(消息的身份标识)
		32位确认序号
    URG：1表示是紧急指针
    ACK：1表示是确认应答的消息
    PSH：1表示把数据立即从缓冲区里取走
    RST：1表示重新连接一下（复位标识）
    SYN：同步序列号标识（TCP连接时使用）
    FIN：结束序列号（TCP断开连接时使用）
    ***TCP的特性
        1.确认应答（保障TCP稳定的核心机制）
	确认应答带来的问题：（1）发送消息丢失
			  （2）确认应答的消息丢失
        2.超时重发（保障TCP稳定）
	超时重发的策略：（1）发送不会以固定的频率发送，采取的时悲观的策略，如果第一次消息发送失败，那么大概率第二次发送也会失败，所以TCP
                                             会以指数级超时时间增长的频率来发送消息
		           （2）如果经历的一定的重试次数，消息还没有得到应答，那么就会停止发送
        3.连接管理（保障TCP稳定）
	3次握手
	    （两次握手不能证明客户端的接收能力和服务器的发送能力）
	    （四次握手能不能？可以，但是没必要）
	4次挥手
	    （三次挥手行不行？有可能可以，如果没有待结束的任务【缓冲区没有任务】，两次挥手就可以合并【捎带应答】）
                TIME_WAIT 2 MSL (最大超时时间)
                2 MSL=ACK最大超时时间(1MSL)+对方发送给他消息的一个最大等待时间(2 MSL)
	如果发现服务器端有大量的CLOSED_WAIT，说明程序是有问题的，没有调用close()方法
        4.滑动窗口（保证性能）
	当前面的数据被正常补齐之后，返回的ACK是最大值，这种机制叫做“快重传”
        5.流量控制
	以结果为导向进行数据的传递
	例如16位的滑动窗口位0，那么发送端就不会发消息给接收端
	TCP 会以结果（接收缓冲区的大小）为导向进行数据的传递
        6.拥塞控制
	根据当前时间的网络来动态调整收发的频率叫拥塞控制
	默认峰值16 
	刚开始发送一个包，如果可以正常接收就会以指数型增加发送的数据包的数量，一直
	增加到流量控制的最大值的时候，就会从指数增长变为线性增长，一直进行收发，直
	到出现大量数据包丢失的时候：
	1.将发送的数量改为1
	2.将流量控制的最大值设置成当前丢包值/2
	然后继续发包，直到成功
	整个过程称为慢开始
        7.延迟应答
	延迟应答策略：
	1.每一段时间延迟应答一次，一定程度加速发消息的速度
	2.每隔n次延迟应答一次
	延迟应答注意事项：
	延迟应答（200ms）的时间一定要小于超时重传的时间（500ms）
        8.捎带应答
	针对于延时应答的性能提升
   TCP面向数据流
        数据流没有边界  容易发生沾包
	解决半包沾包的第一种方法【以\n作为流的边界，这样流就有边界了】
	解决半包沾包的第二种方法【每次发送固定大小的流信息】
    TCP异常情况处理
	1.可挽救：电脑重启或结束进程时，会发送FIN请求，和正常关闭TCP没有区别
	2.不能挽回：电脑掉电和网线突然中断的情况：TCP报活定时器，会定时检测对方是否在线，如果没有响应，说明已经掉线，释放连接
    基于TCP应用层协议：HTTP,SSH,TeInet，FTP,SMTP
******UDP VS  TCP
	1.UDP 无连接  TCP有连接
	2.UDP不稳定，TCP稳定
	3.UDP面向数据报，TCP面向数据流
	4.UDP只有接收缓冲区没有发送缓冲区，TCP二者都有
	5.如果对稳定性要求比较高使用TCP，如果对消息的丢失不敏感且要求性能比较高，考虑使用UDP

面试题：怎样用UDP实现可靠传输？
答：在应用层参考TCP实现稳定性的特性来设计UDP（确认应答、超时重传、连接管理、浏览控制、拥塞控制）
----------------------------------------------------------------------------------------------------------------------------------------------------------
2.网络层
        IP协议
	生存时间TTL  一般是64，每经过一次路由器的跳转，TTL-1，一直减到0还没到达，证明这是一个无效地址


--------------------------------------------------------------------------------------------------------------------------------------
问：在浏览器输入url地址后会发生什么？
	1.浏览器会先检查你的url地址正确性
	2.浏览器会检查这个url有没有缓存，如果有缓存就取缓存
	3.DNS域名解析
	4.TCP 三次握手
	5.HTTP协议Request内容发送
	6.服务器接收到请求，并且进行相应的业务处理
	7.服务器将结果返回给客户端
	8.浏览器拿到返回结果，并调用浏览器的内核实现前端页面的渲染
	9.TCP 四次挥手

------------------------------------------------------------------------------------------------------------------------------------------
NAT实现背景：解决IP不足的问题
本质：实现一个映射，内网IP到外网IP的映射
缺点：1.部署和运行NAT服务是需要硬件支持
          2.当NAT挂掉之后，整个局域网就瘫痪了
NAT   VS     代理
1.应用场景：NAT是解决IP不足的问题，代理是解决不能触达的问题
2.部署：NAT通常会部署在防火墙，代理是一个软件，直接安装就可
3.所在层级不同：NAT是网络层，代理在应用层
	
	
		          

    